{"ast":null,"code":"var _jsxFileName = \"/Users/willieluong/my-app/src/App.js\";\nimport React, { useState } from 'react';\nconst api = {\n  key: \"0dbba878a16119c3c8b596c58e17ffb4\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n};\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [forecast, setForecast] = useState({});\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      //When the key enter is hit: a GET request is fired off to request and receive a json package of weather information from openweather api\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`) // fetch(`${api.base}forecast?q=${query}&units=metric&appid=${api.key}`)\n      .then(res => res.json()).then(result => {\n        setWeather(result);\n        setQuery('');\n        console.log(result);\n      }); // //second get request to call the 5 day/3 hours forecase from openweather api:\n\n      fetch(`${api.base}forecast?q=${query}&units=metric&appid=${api.key}`).then(res_info => res_info.json()).then(result_weather => {\n        // setWeather(result_weather);\n        //clear up the query for the next call\n        // setQuery('');\n        console.log(result_weather);\n      });\n    }\n  }; //Function to build a date containing a month, date and year:\n\n\n  const dateBuilder = d => {\n    let months = [\"January\", \"Feburary\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]; //extracting the current date and time using built-in function:\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: //A check to change the picture in the background depends on the temperature of the current place being found\n    typeof weather.main != \"undefined\" ? weather.main.temp > 16 ? 'app warm' : 'app' : 'app',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"search-bar\",\n    placeholder: \"Search...\",\n    onChange: e => setQuery(e.target.value),\n    value: query,\n    onKeyPress: search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  })), typeof weather.main != \"undefined\" ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 15\n    }\n  }, weather.name, \", \", weather.sys.country), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"weather-box\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"temp\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, Math.round(weather.main.temp), \"\\xB0C\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"weather\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, weather.weather[0].main)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, dateBuilder(new Date())))) : ''));\n} //Function call to execute the website:\n\n\nexport default App;","map":{"version":3,"sources":["/Users/willieluong/my-app/src/App.js"],"names":["React","useState","api","key","base","App","query","setQuery","weather","setWeather","forecast","setForecast","search","evt","fetch","then","res","json","result","console","log","res_info","result_weather","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","main","temp","e","target","value","name","sys","country","Math","round","Date"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nconst api = {\n  key : \"0dbba878a16119c3c8b596c58e17ffb4\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n \n}\n\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  const [forecast, setForecast] = useState({});\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      //When the key enter is hit: a GET request is fired off to request and receive a json package of weather information from openweather api\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      // fetch(`${api.base}forecast?q=${query}&units=metric&appid=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        setWeather(result)\n        setQuery('');\n        console.log(result);\n\n      });\n\n      // //second get request to call the 5 day/3 hours forecase from openweather api:\n      fetch(`${api.base}forecast?q=${query}&units=metric&appid=${api.key}`)\n      .then(res_info => res_info.json())\n      .then(result_weather => {\n        // setWeather(result_weather);\n        //clear up the query for the next call\n        // setQuery('');\n        console.log(result_weather)\n\n      })\n\n\n     \n    }\n  }\n\n\n  //Function to build a date containing a month, date and year:\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"Feburary\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    //extracting the current date and time using built-in function:\n    let day = days[d.getDay()];\n    let date = d.getDate(); \n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className={\n      //A check to change the picture in the background depends on the temperature of the current place being found\n      (typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm': 'app') :'app'}>\n      <main>\n      \n        <div className=\"search-box\">\n          <input \n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {(typeof weather.main != \"undefined\") ? ( \n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n              </div>\n              <div className=\"weather-box\">\n                <div className=\"temp\">\n                  {Math.round(weather.main.temp)}°C\n                </div>\n                <div className=\"weather\">\n                  {weather.weather[0].main}\n                </div>\n              </div>\n              <div className=\"date\">\n                {dateBuilder(new Date())}\n              </div>\n\n            </div>\n          </div>\n\n        ) : ('')}\n      </main>\n    </div>\n  );\n}\n\n//Function call to execute the website:\nexport default App;\n"]},"metadata":{},"sourceType":"module"}